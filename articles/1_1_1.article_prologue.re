
= はじめに

画面の向こう側の誰かを打ち負かしてニヤリとしたり、
仲間と協力して強力なモンスターに立ち向かうのって楽しいですよね。
オンラインゲームはそんな体験を私たちに与えてくれます。
近年はUnityやUnrial Engineの登場によって、ゲーム会社ではなくインディーゲーム開発者の方々が増えてきました。
私もそんな一人で新卒入社した会社に入ってからたまたまUnityを知る機会があり、
ゲーム開発そのものにどんどんのめり込んでいきました。
そんな中で開発したPieceWarsというゲームをオンライン化したいという思いから、今回UGSの勉強とPlayersLinkの開発が始まりました。

== 概要
UGSを使ったオンラインゲームの開発自体はネット上にけっこうな情報が存在しており、
正直この本を読まなくても基本的な実装は中級レベルの開発者であれば可能だと思います。
極論を言えば、エラーが発生しないことを前提とした"繋げるだけ"の処理を実装であれば誰でも出来てしまいます。
しかし、オンラインゲームの開発で意識すべき重要なことは適切なエラーハンドリングだと私は考えます。
家庭における有線環境であれば基本的に問題はないのですが、街中や電車の中で通信を行う場合は通信が不安定なため
すぐにエラーとなってしまいます。
そのため、必要に応じてリトライ処理をしてあげたり、許容範囲を超える通信状況の悪さによってはプレイヤーにエラーを通知してあげなければなりません。
PlayersLinkでは、その辺りを吸収できるように適宜リトライとエラーハンドリングを埋め込んで開発者がそれほど多くのことを考えなくてもいいような設計にしています。
#@#ある程度プログラムを理解しているひとであれば、「このあたりは失敗しやすいだろうからリトライ処理を入れよう」と勘が働くと思いますが、
#@##あまり慣れていない人にとってはあちこちに
本書を読んでいく中で「ああ、この辺にリトライ処理を入れて、このあたりはエラーハンドリングした方がいいんだろうな」という勘どころが身につけば幸いです。

== 基本パターン
UGSでマッチメイキングで行うべきことは主に以下の3つです。
・認証
・ロビーの作成/参加
・Relayサーバーの作成/参加

//image[1_1_1_基本的にやるべきこと][マッチメイキングで基本的にやるべきこと]{
  2023年時点で一般的なゲームのロビー画面
//}

「UGSの概要としては以上です！」と言いたいくらいこれが全てなのですが、せっかく本書を読んで下さっている皆様のためにももう少しご説明したいと思います。
